{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-24T21:36:16.514Z",
    "end": "2022-12-24T21:36:16.885Z",
    "duration": 371,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c112dd6e-9494-4200-a317-75d334a971c2",
      "title": "",
      "fullFile": "cypress/integration/exercicio-api.spec.js",
      "file": "cypress/integration/exercicio-api.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6faf54cd-eeac-4284-9a1f-dc7974c4cfa0",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "9dc0cf24-9bfe-4f96-9dac-f194d2c1ee93",
              "parentUUID": "6faf54cd-eeac-4284-9a1f-dc7974c4cfa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'usuarios'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('usuarios');\n  expect(response.body).to.have.property('quantidade');\n  expect(response.duration).to.be.lessThan(200);\n  expect(response.body.quantidade).to.be.not.equal(0);\n});",
              "err": {},
              "uuid": "f6c56ffb-7509-4150-877f-1d11d317f3ee",
              "parentUUID": "6faf54cd-eeac-4284-9a1f-dc7974c4cfa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": nome,\n    \"email\": email,\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n  expect(response.body._id).to.be.not.equal(\"\");\n});",
              "err": {},
              "uuid": "58373891-48ef-47ee-8ccd-c7f8981f5d7d",
              "parentUUID": "6faf54cd-eeac-4284-9a1f-dc7974c4cfa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": nome,\n    \"email\": \"nome.qa.com.br\",\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.email).to.equal('email deve ser um email válido');\n  expect(response.duration).to.be.lessThan(200);\n});",
              "err": {},
              "uuid": "1e9e3cd6-46ae-4aba-9f31-3dbdbf6905c6",
              "parentUUID": "6faf54cd-eeac-4284-9a1f-dc7974c4cfa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email repetido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email repetido",
              "timedOut": null,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": nome,\n    \"email\": \"fernando.tester@qa.com\",\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n  expect(response.duration).to.be.lessThan(200);\n});",
              "err": {},
              "uuid": "ea348a0f-d251-4cfe-b7bf-6097bbd2e005",
              "parentUUID": "6faf54cd-eeac-4284-9a1f-dc7974c4cfa0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'usuarios',\n  body: {\n    \"nome\": \"Testador de PUT\",\n    \"email\": \"put@tester.com\",\n    \"password\": \"teste\",\n    \"administrador\": \"true\"\n  }\n}).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": \"Alterei meu nome\",\n      \"email\": nome + \"@qa.com.br\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n    expect(response.duration).to.be.lessThan(270);\n    expect(response.status).to.equal(200);\n  });\n});\nit('Deve deletar um usuário previamente cadastrado', () => {\n  cy.request({\n    method: 'POST',\n    url: 'usuarios',\n    body: {\n      \"nome\": \"Testador de DEL\",\n      \"email\": \"del@tester.com\",\n      \"password\": \"teste\",\n      \"administrador\": \"true\"\n    }\n  }).then(response => {\n    let id = response.body._id;\n    cy.request({\n      method: 'DELETE',\n      url: `usuarios/${id}`\n    }).then(response => {\n      expect(response.body.message).to.equal('Registro excluído com sucesso');\n      expect(response.status).to.equal(200);\n    });\n  });\n});",
              "err": {},
              "uuid": "20871cc6-66e3-446f-97bf-394f1cfd8e20",
              "parentUUID": "6faf54cd-eeac-4284-9a1f-dc7974c4cfa0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9dc0cf24-9bfe-4f96-9dac-f194d2c1ee93",
            "f6c56ffb-7509-4150-877f-1d11d317f3ee",
            "58373891-48ef-47ee-8ccd-c7f8981f5d7d",
            "1e9e3cd6-46ae-4aba-9f31-3dbdbf6905c6",
            "ea348a0f-d251-4cfe-b7bf-6097bbd2e005",
            "20871cc6-66e3-446f-97bf-394f1cfd8e20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 328,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}